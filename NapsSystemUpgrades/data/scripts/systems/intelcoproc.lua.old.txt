package.path = package.path .. ";data/scripts/systems/?.lua"
package.path = package.path .. ";data/scripts/lib/?.lua"
include ("basesystem")
include ("utility")
include ("randomext")

-- bridge assistance co-proc -- intelligence
    -- valuables detector
    -- adds scanner reach for HP on enemies
    -- long distance radar/scanner
    -- add pitch/roll/yaw boost
    -- hyperspace cooldown

-- optimization so that energy requirement doesn't have to be read every frame
FixedEnergyRequirement = true
--PermanentInstallationOnly = true
Unique = true

materialLevel = 0
range = 0
amount = 0
interestingEntities = {}
detections = {}
highlightRange = 0

local entityId
local highlightColor = ColorRGB(1.0, 1.0, 1.0)

-- this variable gets reset on the client every time the player changes sectors because the script is recreated
local chatMessageDisplayed = false


function getHyperspaceBonuses(seed, rarity, permanent)
    math.randomseed(seed)

    local cdfactor = 0
    local cdbias = 0

    cdfactor = 5 -- base value, in percent

    -- add flat percentage based on rarity
    cdfactor = cdfactor + (rarity.value + 1) * 2.5 -- add 0% (worst rarity) to +15% (best rarity)

    if permanent then
        -- add extra percentage, span is based on rarity
        cdfactor = cdfactor * 2
    end
    cdfactor = -cdfactor / 100

    return cdfactor
end


function getThrusterBonuses(seed, rarity, permanent)
    math.randomseed(seed)

    local thrustboost = 0
    if permanent then
        thrustboost = ((((rarity.value + 2)) / 7) * 2.00) + (((rarity.value + 4) * 10) / 100)
    end

    return thrustboost
end

function getRadarBonuses(seed, rarity, permanent)
    math.randomseed(seed)

    local radar = 0
    local hiddenRadar = 0

    radar = math.max(0, getInt(rarity.value, rarity.value * 2.0)) + 1
    hiddenRadar = math.max(0, getInt(rarity.value, rarity.value * 1.5)) + 1

    -- probability for both of them being used
    -- when rarity.value >= 4, always both
    -- when rarity.value <= 0 always only one
    local probability = math.max(0, rarity.value * 0.25)
    if math.random() > probability then
        -- only 1 will be used
        if math.random() < 0.5 then
            radar = 0
        else
            hiddenRadar = 0
        end
    end

    if permanent then
        radar = radar * 1.5
        hiddenRadar = hiddenRadar * 2
    end

    return round(radar), round(hiddenRadar)
end

function getScannerBonuses(seed, rarity, permanent)
    math.randomseed(seed)

    local scanner = 1
    local scannerBase = 1
    local scannerBonus = 0

    scanner = 25 -- base value, in percent
    -- add flat percentage based on rarity
    scanner = scanner + (rarity.value + 2) * 20 -- add +20% (worst rarity) to +140% (best rarity)
    scanner = scanner / 100

    scannerBase = scanner

    if permanent then
        scannerBonus = scanner * 1.5
        scanner = scanner + scannerBonus
    end

    return scanner, scannerBase, scannerBonus
end

function getValueableScannerBonuses(seed, rarity, permanent)
    math.randomseed(seed)

    local highlightRange = 0
    if rarity.value >= RarityType.Rare then
        highlightRange = 500
    end

    if rarity.value >= RarityType.Exceptional then
        highlightRange = 1000
    end

    if rarity.value >= RarityType.Exotic then
        highlightRange = math.huge
    end

    return detections, highlightRange
end

function onInstalled(seed, rarity, permanent)
    -- valuable scanner range will be added in onClient():onInstalled()

    -- add additional scanner range
    local scanner, _, _ = getScannerBonuses(seed, rarity, permanent)
    addBaseMultiplier(StatsBonuses.ScannerReach, scanner)

    -- add additional radar range
    local radar, hiddenRadar = getRadarBonuses(seed, rarity, permanent)
    addMultiplyableBias(StatsBonuses.RadarReach, radar)
    addMultiplyableBias(StatsBonuses.HiddenSectorRadarReach, hiddenRadar)

    -- thruster boost
    local thrusterboost = getThrusterBonuses(seed, rarity, permanent)
    local thrusters = Thrusters()
	thrusters.basePitch = thrusterboost
	thrusters.baseRoll = thrusterboost
	thrusters.baseYaw = thrusterboost
	thrusters.fixedStats = true

    -- add processing power
    if permanent then
        addMultiplyableBias(StatsBonuses.ExcessProcessingPowerSteps, 1)
    end

    -- add hyperspace cooldown
    local cdfactor = getHyperspaceBonuses(seed, rarity, permanent)
    addBaseMultiplier(StatsBonuses.HyperspaceCooldown, cdfactor)
end

function onUninstalled(seed, rarity, permanent)
    local thrusters = Thrusters()
	if thrusters ~= nil then
		thrusters.fixedStats = false
	end
end


if onClient() then

function onInstalled(seed, rarity, permanent)
    local player = Player()
    if valid(player) then
        player:registerCallback("onPreRenderHud", "onPreRenderHud")
        player:registerCallback("onShipChanged", "detectAndSignal")
    end

    detections, highlightRange = getValueableScannerBonuses(seed, rarity, permanent)
    detectAndSignal()
end

function onUninstalled(seed, rarity, permanent)

end

function onDelete()
    if entityId then
        removeShipProblem("ValuablesDetector", entityId)
    end
end

function detectAndSignal()

    -- check for valuables and send a signal
    interestingEntities = {}

    local player = Player()
    if not valid(player) then return end
    if player.craftIndex ~= Entity().index then return end

    detectValuables()
    detectFlightRecorders()
    signal()
end


function detectValuables()

    local rarity = getRarity()
    if not rarity then return end

    local self = Entity()

    local entities = {Sector():getEntitiesByScriptValue("valuable_object")}

    for _, entity in pairs(entities) do
        local value = entity:getValue("valuable_object") or RarityType.Petty
        if rarity.value >= value then

            if entity.dockingParent ~= self.id then
                table.insert(interestingEntities, entity)
            end
        end
    end
end

function detectFlightRecorders()

    local entities = {Sector():getEntitiesByScriptValue("blackbox_wreckage")}

    local self = Entity()

    local rarity = getRarity()
    for _, entity in pairs(entities) do
        local value = entity:getValue("blackbox_wreckage") or RarityType.Petty
        if rarity.value >= value then
            if entity.dockingParent ~= self.id then
                table.insert(interestingEntities, entity)
            end
        end
    end

end

function signal()
    local player = Player()

    if valid(player) and player.craftIndex == Entity().index then
        if #interestingEntities > 0 then
            if not chatMessageDisplayed then
                displayChatMessage("Valuable objects detected."%_t, "Object Detector"%_t, 3)
                chatMessageDisplayed = true
            end

            entityId = Entity().id
            addShipProblem("ValuablesDetector", entityId, "Valuable objects detected."%_t, "data/textures/icons/valuables-detected.png", highlightColor)
        end
        if #interestingEntities == 0 then
            removeShipProblem("ValuablesDetector", Entity().id)
        end
    end
end

function onSectorChanged()
    detectAndSignal()
end

function updateClient()
    detectAndSignal()
end

function getUpdateInterval()
    return 10
end

function onPreRenderHud()

    if not highlightRange or highlightRange == 0 then return end

    local player = Player()
    if not player then return end
    if player.state == PlayerStateType.BuildCraft or player.state == PlayerStateType.BuildTurret then return end

    local shipPos = Entity().translationf

    -- detect all objects in range
    local renderer = UIRenderer()

    for i, entity in pairs(interestingEntities) do
        if not valid(entity) then
            interestingEntities[i] = nil
        end
    end

    for i, entity in pairs(interestingEntities) do
        local d = distance2(entity.translationf, shipPos)

        if d <= highlightRange * highlightRange then
            renderer:renderEntityTargeter(entity, highlightColor);
            renderer:renderEntityArrow(entity, 30, 10, 250, highlightColor);
        end
    end

    renderer:display()
end
end


function getName(seed, rarity)
    return "AA-Tech Bridge Intelligence Assistance Coprocessor Upgrade MK ${mark}"%_t % {mark = toRomanLiterals(rarity.value + 2)}
end

function getBasicName()
    return "Bridge Intelligence Assistance Coprocessor /* generic name for 'AA-Tech Bridge Intelligence Assistance Coprocessor Upgrade MK ${mark}' */"%_t
end

function getIcon(seed, rarity)
    return "data/textures/icons/scanner_processor_magnifying_glass.png"
end

function getEnergy(seed, rarity, permanent)
    local energy = 0

    -- add scanner energy consumption
    local scanner, _, _ = getScannerBonuses(seed, rarity, permanent)
    energy = energy + scanner * 550 * 1000 * 1000

    -- add radar energy consumption
    local radar, hiddenRadar = getRadarBonuses(seed, rarity, permanent)
    energy = energy + radar * 75 * 1000 * 1000 + hiddenRadar * 150 * 1000 * 1000

    -- add valuable scanner energy consumption
    local detections, highlightRange = getValueableScannerBonuses(seed, rarity)
    highlightRange = math.min(highlightRange, 1500)
    energy = energy + (highlightRange * 0.0005 * 1000 * 1000 * 1000) + (#detections * 15 * 1000 * 1000)
    
    -- add thruster boost energy consumption
    local thrusterboost = getThrusterBonuses(seed, rarity, permanent)
    energy = energy + 3 * thrusterboost * 1000 * 1000 * 123

    -- add hyperspace cooldown energy consumption
    local cdfactor = getHyperspaceBonuses(seed, rarity, permanent)
    energy = energy + math.abs(cdfactor) * 2.5 * 1000 * 1000 * 1000

    return energy
end

function getPrice(seed, rarity)
    local price = 0

    -- add scanner price
    local scanner, _, _ = getScannerBonuses(seed, rarity, permanent)
    price = price + scanner * 100 * 250 * 2.5 ^ (rarity.value + 1)

    -- add radar price
    local radar, hiddenRadar = getRadarBonuses(seed, rarity)
    price = price + (radar * 3000 + hiddenRadar * 5000) * 2.5 ^ (rarity.value + 1)
    
    -- add valuable scanner price
    local detections, range = getValueableScannerBonuses(seed, rarity)
    range = math.min(range, 1500)
    price = price + ((rarity.value + 2) * 750 + range * 1.5)  * 2.5 ^ (rarity.value + 1)

    -- add thruster boost price
    local thrusterboost = getThrusterBonuses(seed, rarity, permanent)
    price = price + (rarity.value + 2) * 750 * thrusterboost * 5000 * 2.5 ^ (rarity.value + 1)

    -- add hyperspace cooldown energy price
    local cdfactor = getHyperspaceBonuses(seed, rarity, true)
    price = price + math.abs(cdfactor) * 100 * 350 * 2.5 ^ rarity.value

    return price
end

function getTooltipLines(seed, rarity, permanent)
    local texts = {}
    local bonuses = {}

    -- add scanner tooltips
    local scanner, scannerBase, scannerBonus = getScannerBonuses(seed, rarity, permanent)
    if scanner ~= 0 then
        table.insert(texts, {ltext = "Scanner Range"%_t, rtext = string.format("%+i%%", round(scanner * 100)), icon = "data/textures/icons/signal-range.png", boosted = permanent})
        if not permanent then
            table.insert(bonuses, {ltext = "Scanner Range"%_t, rtext = string.format("%+i%%", round(scannerBonus * 100)), icon = "data/textures/icons/signal-range.png"})
        end    
    end

    -- add radar tooltips
    local radar, hiddenRadar = getRadarBonuses(seed, rarity, permanent)
    local baseRadar, baseHidden = getRadarBonuses(seed, rarity, false)
    local bonusRadar, bonusHiddenRadar = getRadarBonuses(seed, rarity, true)
    bonusRadar = bonusRadar - baseRadar
    bonusHiddenRadar = bonusHiddenRadar - baseHidden
    if radar ~= 0 then
        table.insert(texts, {ltext = "Radar Range"%_t, rtext = string.format("%+i", radar), icon = "data/textures/icons/radar-sweep.png", boosted = permanent})
        if not permanent then
            table.insert(bonuses, {ltext = "Radar Range"%_t, rtext = string.format("%+i", bonusRadar), icon = "data/textures/icons/radar-sweep.png"})
        end
    end
    if hiddenRadar ~= 0 then
        table.insert(texts, {ltext = "Deep Scan Range"%_t, rtext = string.format("%+i", hiddenRadar), icon = "data/textures/icons/radar-sweep.png", boosted = permanent})
        if not permanent then
            table.insert(bonuses, {ltext = "Deep Scan Range"%_t, rtext = string.format("%+i", bonusHiddenRadar), icon = "data/textures/icons/radar-sweep.png"})
        end
    end

    -- add valuable scanner tooltip
    local _, range = getValueableScannerBonuses(seed, rarity)
    if range > 0 then
        local rangeText = "Sector"%_t
        if range < math.huge then
            rangeText = string.format("%g", round(range / 100, 2))
        end
        table.insert(texts, {ltext = "Highlight Range"%_t, rtext = rangeText, icon = "data/textures/icons/rss.png"})
    end
    table.insert(texts, {ltext = "Detection Range"%_t, rtext = "Sector"%_t, icon = "data/textures/icons/rss.png"})
    
    -- add thruster boost tooltips
    local thrusterboost = getThrusterBonuses(seed, rarity, true)
    if thrusterboost ~= 0 then
        if permanent then
            table.insert(texts, {ltext = "Pitch/Roll/Yaw (Fixed)"%_t, rtext = string.format("%.2f", thrusterboost), icon = "data/textures/icons/gyroscope.png", boosted = permanent})
        else
            table.insert(bonuses, {ltext = "Pitch/Roll/Yaw (Fixed)"%_t, rtext = string.format("%.2f", thrusterboost), icon = "data/textures/icons/gyroscope.png"})
        end
    end

    -- add hyperspace cooldown tooltips
    local cdfactor = getHyperspaceBonuses(seed, rarity, true)
    if cdfactor ~= 0 then
        if permanent then
            table.insert(texts, {ltext = "Hyperspace Cooldown"%_t, rtext = string.format("%+i%%", round(cdfactor * 100)), icon = "data/textures/icons/hourglass.png", boosted = permanent})
        end
        table.insert(bonuses, {ltext = "Hyperspace Cooldown"%_t, rtext = string.format("%+i%%", round(cdfactor * 100)), icon = "data/textures/icons/hourglass.png", boosted = permanent})
    end

    if permanent then
        table.insert(texts, {ltext = "Excess Processing Power"%_t, rtext = "+117.2k", icon = "data/textures/icons/star-cycle.png", boosted = permanent})
        table.insert(texts, {ltext = "Socket Equivalent"%_t, rtext = "+1", icon = "data/textures/icons/star-cycle.png", boosted = permanent})
    else
        table.insert(bonuses, {ltext = "Excess Processing Power"%_t, rtext = "+117.2k", icon = "data/textures/icons/star-cycle.png"})
        table.insert(bonuses, {ltext = "Socket Equivalent"%_t, rtext = "+1", icon = "data/textures/icons/star-cycle.png"})
    end

    return texts, bonuses
end

function getDescriptionLines(seed, rarity, permanent)
    local texts = {}

    table.insert(texts, {ltext = "AA-Tech Bridge Intelligence Assistance Coprocessor"%_t})
    table.insert(texts, {ltext = "Improves various information gathering systems"%_t, rtext = "", icon = "data/textures/icons/nothing.png", fontType = FontType.Normal, lcolor = ColorRGB(0.7, 0.7, 0.7)})
    table.insert(texts, {ltext = "", boosted = permanent})

    if rarity.value == RarityType.Petty then
        table.insert(texts, {ltext = "Detects claimable asteroids and flight recorders"%_t, amount})
    elseif rarity.value == RarityType.Common then
        table.insert(texts, {ltext = "Detects claimable asteroids, flight recorders and wreckages"%_t, amount})
    elseif rarity.value == RarityType.Uncommon then
        table.insert(texts, {ltext = "Detects claimable asteroids, flight recorders, wreckages and stashes"%_t, amount})
    else
        table.insert(texts, {ltext = "Detects and highlights all interesting objects"%_t, amount})
    end

    return texts
end


function getComparableValues(seed, rarity)
    local base = {}
    local bonus = {}

    -- add scanner compare values
    local scanner, scannerBase, scannerBonus = getScannerBonuses(seed, rarity, false)
    table.insert(base, {name = "Scanner Range"%_t, key = "range", value = round(scannerBase * 100), comp = UpgradeComparison.MoreIsBetter})
    table.insert(bonus, {name = "Scanner Range"%_t, key = "range", value = round(scannerBonus * 100), comp = UpgradeComparison.MoreIsBetter})

    -- add valuable scanner compare values
    local _, range = getValueableScannerBonuses(seed, rarity, false)
    table.insert(base, {name = "Highlight Range"%_t, key = "highlight_range", value = round(range / 100), comp = UpgradeComparison.MoreIsBetter})
    table.insert(base, {name = "Detection Range"%_t, key = "detection_range", value = 1, comp = UpgradeComparison.MoreIsBetter})

    -- add radar compare values
    local radar, hiddenRadar = getRadarBonuses(seed, rarity, true)
    local baseRadar, baseHidden = getRadarBonuses(seed, rarity, false)
    if radar ~= 0 then
        table.insert(base, {name = "Radar Range"%_t, key = "radar_range", value = baseRadar, comp = UpgradeComparison.MoreIsBetter})
        table.insert(bonus, {name = "Radar Range"%_t, key = "radar_range", value = radar-baseRadar, comp = UpgradeComparison.MoreIsBetter})
    end
    if hiddenRadar ~= 0 then
        table.insert(base, {name = "Deep Scan Range"%_t, key = "deep_range", value = baseHidden, comp = UpgradeComparison.MoreIsBetter})
        table.insert(bonus, {name = "Deep Scan Range"%_t, key = "deep_range", value = hiddenRadar-baseHidden, comp = UpgradeComparison.MoreIsBetter})
    end

    -- add thruster boost compare values
    local thrusterboost = getThrusterBonuses(seed, rarity, true)
    if thrusterboost ~= 0 then
        table.insert(base, {name = "Thruster boost"%_t, key = "thruster_boost", value = thrusterboost, comp = UpgradeComparison.MoreIsBetter})
    end

    -- add hyperspace cooldown compare values
    local cdfactorbase = getHyperspaceBonuses(seed, rarity, false)
    local cdfactor = getHyperspaceBonuses(seed, rarity, true)
    if cdfactorbase ~= 0 then
        table.insert(base, {name = "Hyperspace Cooldown"%_t, key = "hs_cooldown", value = round(cdfactorbase * 100), comp = UpgradeComparison.LessIsBetter})
    end
    if cdfactor ~= 0 then
        table.insert(bonus, {name = "Hyperspace Cooldown"%_t, key = "hs_cooldown", value = round((cdfactor-cdfactorbase) * 100), comp = UpgradeComparison.LessIsBetter})
    end

    return base, bonus
end

